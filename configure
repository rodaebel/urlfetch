#!/bin/sh

BASENAME=`basename $0`

. config.ini

usage() {
   echo "Usage: $BASENAME [options]";
}

log() {
   printf "$1"
   printf "$1" >> $LOGFILE
}

error_exit() {
   msg="$BASENAME: error: $2"
   echo "$msg" 1>&2
   echo "$msg" >> $LOGFILE
   exit $1
}

for _option
do

   # If the previous option needs an argument, assign it.
   if test -n "$_prev"; then
      eval "$_prev=\$_option"
      _prev=
      continue
   fi

   case "$_option" in
   -*=*) _optarg=`echo "$_option" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
   *) _optarg= ;;
   esac

   case "$_option" in

   --help | -h)
      usage;
      cat << EOF

Options:
   -h,--help                display this message
      --with-python=PATH    use this Python interpreter

EOF
   exit 0;;

   --with-python=*)
      PYTHON="$_optarg" ;;

   --* | -* ) { echo "$BASENAME: error: $_option: invalid option; use --help to show usage" 1>&2; exit 1; };;
   * )
      args="$args$_option " ;;

   esac
done

cat >$LOGFILE << EOF
Created by $PACKAGE configure.

$ $0 $@

EOF

#
# Check Erlang version
#
log "checking for Erlang OTP version ... "
ERL_PATH=`which erl`
if [ "$ERL_PATH" = "" ]; then
   error_exit 1 "no Erlang (BEAM) emulator found";
fi
OTP_RELEASE=`erl -noshell -eval 'io:fwrite(erlang:system_info(otp_release)), init:stop().'`
log "${OTP_RELEASE}\n"

#
# Check Python version
#
if [ "$PYTHON" = "" ]; then
   PYTHON=`which python`
fi
log "checking for Python version ... "
if [ "$PYTHON" = "" ]; then
   error_exit 1 "no Python interpreter found";
fi
PYTHON_VERSION=`${PYTHON} -c "import sys; print ('%s.%s.%s'%sys.version_info[:3])"`
log "${PYTHON_VERSION}\n"

#
# Create makefile
#
log "creating: Makefile\n";
cat Makefile.in | sed \
  -e "s,@PACKAGE@,${PACKAGE}," \
  -e "s,@PYTHON@,${PYTHON}," \
  > Makefile

exit 0;
